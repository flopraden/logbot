#!/usr/bin/perl
use FindBin '$RealBin';
use lib $RealBin;
use LogBot::BP;

use DateTime;
use File::Basename;
use FileHandle;
use File::Path qw(make_path remove_tree);

# init

LogBot->init("$RealBin/logbot.conf");
my $backup_path = "$RealBin/backup";

# generate text logs of events

foreach my $network (LogBot->networks) {
    my $network_path = "$backup_path/logs/" . $network->{network};

    foreach my $channel ($network->channels) {
        my $channel_path = $network_path . '/' . $channel->{name};
        make_path($channel_path) unless -d $channel_path;

        # determine the date to start updating the logs from

        my $first_date;

        my @current_logs =
            sort { basename($a, '.txt') <=> basename($b, '.txt') }
            glob("$channel_path/*.txt");
        if (@current_logs) {
            # use the date of the most recent log file as the first_date
            my $ymd = basename(pop @current_logs, '.txt');
            my ($y, $m, $d) = $ymd =~ /^(\d\d\d\d)(\d\d)(\d\d)$/;
            die unless $y;
            $first_date = DateTime->new(
                year => $y, month => $m, day => $d,
            );

        } else {
            # no logs, use the first event's date
            my $first_event = $channel->first_event;
            next unless $first_event;
            $first_date = $first_event->datetime;

        }

        # determine the last date

        my $last_event  = $channel->last_event;
        my $last_date = $last_event->datetime
                                   ->clone()
                                   ->truncate(to => 'day')
                                   ->add(days => 1)
                                   ->add(nanoseconds => -1);

        # one file per date

        my $date = $first_date->clone()
                              ->truncate(to => 'day');
        while ($date < $last_date) {
            my $file = "$channel_path/" . $date->ymd('') . '.txt';
            my $fh = FileHandle->new;
            $fh->open(">> $file");

            my $end_date = $date->clone()
                                ->add(days => 1)
                                ->add(nanoseconds => -1);
            $channel->browse(
                date_after  => $date->epoch,
                date_before => $end_date->epoch,
                order       => 'time',
                callback    => sub {
                    my $event = shift;
                    $fh->print($event->log_string . "\n");
                },
            );

            $fh->close();

            $date->add(days => 1);
        }
    }
}

# backup the source

my $source_path = "$backup_path/source";
make_path($source_path) unless -d $source_path;

chdir(dirname(__FILE__));
foreach my $file (glob('*')) {
    next if -d $file
            || $file =~ /\.swp$/
            || $file =~ /\.conf$/;
    rsync($file, "$source_path/$file") or die $!;
}

rsync('LogBot*', $source_path);
rsync('3rd-party-licenses', $source_path);
make_path("$source_path/www") unless -d "$source_path/www";
my $www_path = -l 'www' ? readlink('www') : 'www/';
rsync($www_path, "$source_path/www", "--exclude 'google*.html'");
rsync("${www_path}.ht*", "$source_path/www")
    if glob("${www_path}.ht*");

rsync("logbot.conf", "$backup_path");

sub rsync {
    my ($source, $destination, $extra) = @_;
    $extra ||= '';
    system "/usr/bin/rsync -a --delete $extra $source $destination";
    die unless -e $destination;
}

